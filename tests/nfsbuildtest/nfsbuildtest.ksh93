#!/usr/bin/ksh93

#
# MIT License
#
# Copyright (c) 2025 Roland Mainz <roland.mainz@nrubsig.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

#
# nfsbuildtest.ksh93
#
# Simple NFSv4 torture test by building { bash, gcc } in parallel
# on a NFS filesystem
#

#
# Usage:
# - build bash:
#   $ ksh93 nfsbuildtest.ksh93 bash clean
#   $ ksh93 nfsbuildtest.ksh93 bash createcache
#   $ ksh93 nfsbuildtest.ksh93 bash build
#
# - build gcc:
#   $ ksh93 nfsbuildtest.ksh93 gcc clean
#   $ ksh93 nfsbuildtest.ksh93 gcc createcache
#   $ ksh93 nfsbuildtest.ksh93 gcc build
#
# - build ms-nfs41-client:
#   $ ksh93 nfsbuildtest.ksh93 msnfs41client clean
#   $ ksh93 nfsbuildtest.ksh93 msnfs41client createcache
#   $ ksh93 nfsbuildtest.ksh93 msnfs41client build
#

function gcc_createcache
{
	set -o xtrace
	set -o errexit
	set -o nounset

	mkdir -p '../gitbundles'
	rm -f '../gitbundles/gcc.bundle'

	git -c checkout.workers=16 clone git://repo.or.cz/gcc.git
	cd gcc
	git config --global --add safe.directory "$PWD"
	git bundle create '../gitbundles/gcc.bundle' --all
	git config --global --unset safe.directory "$PWD"
	cd ..
	rm -Rf gcc

	return 0
}


function patch_gcc13_1_0_libiberty_strsignal_psignal_prototype
{
{
cat <<EOF
diff --git a/libiberty/strsignal.c b/libiberty/strsignal.c
index 36b41f17e12..de7a5317b60 100644
--- a/libiberty/strsignal.c
+++ b/libiberty/strsignal.c
@@ -551,7 +551,7 @@ followed by a newline.
 #ifndef HAVE_PSIGNAL

 void
-psignal (int signo, char *message)
+psignal (int signo, const char *message)
 {
   if (signal_names == NULL)
     {
EOF
} | patch -p1 --ignore-whitespace
    return $?
}

function gcc_build
{
	set -o xtrace
	set -o errexit
	set -o nounset

	#
	# build config
	#
	typeset config_cp_p_function_not_implemented_workaround=false
	typeset config_use_posix_ksh93_builtins=true

	compound gitdata=(
		typeset url='git://repo.or.cz/gcc.git'
		# use fixed git tag, so build times are compareable
		typeset tag='releases/gcc-13.1.0'
	)

	typeset -a configure_options=(
		# Per irc://irc.oftc.net/#gcc:
		# ".. pch is broken on windows as allocation using the fixed
		# address might not succeed in general and there is fixed
		# retry loop using delay that kills all performance
		# benefits..."
		'--disable-libstdcxx-pch'
		'--enable-serial-configure'
	)

	#
	# temp dir setup
	#

	tmpdir="$PWD/tmpdir"
	mkdir -p "$tmpdir"
	chmod a+rwxt "$tmpdir"
	if [[ -d "$tmpdir" && -w "$tmpdir" ]] ; then
		printf '#### Using temp dir %q\n' "$tmpdir"
		export TMPDIR="$tmpdir"
		export TEMP="$tmpdir"
		export TMP="$tmpdir"
	else
		print -u2 -f "TEMPDIR %q on NFS filesystem does not work.\n" "$tmpdir"
		return 1
	fi

	#
	# print user info
	#
	id -a
	pwd

	#
	# source checkout
	#

	#time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch git://gcc.gnu.org/git/gcc.git
	#time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch https://github.com/gcc-mirror/gcc.git

	if [[ -f '../gitbundles/gcc.bundle' ]] ; then
		# Use local bundle as cache,
		# so build times only depend on local filesystem performance
		# and not HTTPS speed
		time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch '../gitbundles/gcc.bundle'
	else
		time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch "${gitdata.url}"
	fi

	cd "$PWD/gcc/"

	# make sure git commands (like git "describe", "fsck", ...) work
	git config --global --add safe.directory "$PWD"

	# use git fsck as filesystem test
	time git fsck

	if $config_use_posix_ksh93_builtins ; then
		PATH="/usr/ast/bin:/opt/ast/bin:$PATH"
	fi

	#
	# patch sources and configure build
	#

	patch_gcc13_1_0_libiberty_strsignal_psignal_prototype

	# original mkinstalldirs cannot handle UNC paths
	printf '#!/bin/sh\n# original mkinstalldirs cannot handle Cygwin UNC paths\nmkdir -p "$@"\nexit $?\n' >'mkinstalldirs'
	chmod a+x 'mkinstalldirs'

	# Cygwin/MSYS2: workaround for configure using cp -p where ln -s should be used
	# (this is an automake/autoconf issue, they should trust Cygwin and not use
	# ancient workarounds for issues which no longer exists)
	(set -o xtrace ; sed -i "s/as_ln_s='cp -pR'/as_ln_s='ln -s'/g" $(find . -name 'configure') )

	if $config_use_posix_ksh93_builtins ; then
		(set -o xtrace ; sed -i "s/\/bin\/sh/\/bin\/ksh93/g" $(find . -name 'configure') )
	fi

	if $config_use_posix_ksh93_builtins ; then
		export CONFIG_SHELL=/usr/bin/ksh93
		ksh93 ./configure "${configure_options[@]}"
	else
		export CONFIG_SHELL=/usr/bin/bash
		bash ./configure "${configure_options[@]}"
	fi

	if $config_cp_p_function_not_implemented_workaround ; then
		# workaround for $ cp -p # failing with "Function not
		# implemented" in older versions of ms-nfs41-client
		if $config_use_posix_ksh93_builtins ; then
			(
				set -o xtrace
				sed -i -r 's/(cp.*)([[:space:]]+-p[[:space:]]+)/\1\2 -A pt /g' \
					$(find . -name 'Makefile' -o -name 'Makefile.in')
			)
		else
			(
				set -o xtrace ; sed -i -r 's/(cp.*)([[:space:]]+-p[[:space:]]+)/\1\2--no-preserve=ownership /g' \
				$(find . -name 'Makefile' -o -name 'Makefile.in')
			)
		fi
	fi

	if $config_use_posix_ksh93_builtins ; then
		# replace /bin/sh with /bin/ksh93 for speed
		(set -o xtrace ; sed -i -r 's/\/bin\/sh/\/bin\/ksh93/g' \
			$(find . -name 'Makefile' -o -name 'Makefile.in') )
	fi

	#
	# Create /usr/local/ dir in "$PWD/install_root/" because gcc's
	# make install will fail if the dir is missing
	#
	mkdir -p -- "$PWD/install_root/usr/local"

	#
	# build gcc
	# Notes:
	# - targets "all" and "install" must be called in sequence, as
	# a plain $ make -j32 install # can fail when tools build
	# during $ make -j32 all # missing
	#
	(
		set -o xtrace
		time ksh93 -c 'export SHELL=/bin/ksh93 ; (yes | make --load-average 32 -j12 all)'
		printf "######## gcc build make all returned %d\n" $?
		time ksh93 -c 'export SHELL=/bin/ksh93 ; (yes | make --load-average 32 -j12 install DESTDIR="$PWD/install_root")'
		printf "######## gcc build make install returned %d\n" $?
	)

	echo "#Done."
	return 0
}


function gcc_clean
{
	set -o xtrace
	set -o errexit
	set -o nounset

	rm -Rf gcc
	return 0
}


function bash_createcache
{
	set -o xtrace
	set -o errexit
	set -o nounset

	mkdir -p '../gitbundles'
	rm -f '../gitbundles/bash.bundle'

	git -c checkout.workers=16 clone 'https://github.com/bminor/bash.git'
	cd bash
	git config --global --add safe.directory "$PWD"
	git bundle create '../gitbundles/bash.bundle' --all
	git config --global --unset safe.directory "$PWD"
	cd ..
	rm -Rf bash

	return 0
}


function bash_build
{
	set -o xtrace
	set -o errexit
	set -o nounset

	compound cygwin_vers

	get_cpv_cygwin_version cygwin_vers

	#
	# build config
	#
	typeset config_cp_p_function_not_implemented_workaround=false
	typeset config_use_posix_ksh93_builtins=true

	compound gitdata=(
		typeset url='https://github.com/bminor/bash.git'
		# use fixed git tag, so build times are compareable
		# (make sure to test this with Windows 10/32bit+Cygwin 3.4!!)
		typeset tag='bash-5.0'
	)

	typeset -a configure_options=(
		'--with-curses'
	)

	#
	# temp dir setup
	#

	tmpdir="$PWD/tmpdir"
	mkdir -p "$tmpdir"
	chmod a+rwxt "$tmpdir"
	if [[ -d "$tmpdir" && -w "$tmpdir" ]] ; then
		printf '#### Using temp dir %q\n' "$tmpdir"
		export TMPDIR="$tmpdir"
		export TEMP="$tmpdir"
		export TMP="$tmpdir"
	else
		print -u2 -f "TEMPDIR %q on NFS filesystem does not work.\n" "$tmpdir"
		return 1
	fi

	#
	# print user info
	#
	id -a
	pwd

	#
	# source checkout
	#

	if [[ -f '../gitbundles/bash.bundle' ]] ; then
		# Use local bundle as cache,
		# so build times only depend on local filesystem performance
		# and not HTTPS speed
		time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch '../gitbundles/bash.bundle'
	else
		time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch "${gitdata.url}"
	fi

	cd "$PWD/bash/"

	# make sure git commands (like git "describe", "fsck", ...) work
	git config --global --add safe.directory "$PWD"

	# use git fsck as filesystem test
	time git fsck

	if $config_use_posix_ksh93_builtins ; then
		PATH="/usr/ast/bin:/opt/ast/bin:$PATH"
	fi

	#
	# patch sources and configure build
	#

	# original mkinstalldirs cannot handle UNC paths
	printf '#!/bin/sh\n# original mkinstalldirs cannot handle Cygwin UNC paths\nmkdir -p "$@"\nexit $?\n' >'mkinstalldirs'
	chmod a+x 'support/mkinstalldirs'

	# disable loadable plugins
	sed -i -E 's/-\( cd \$\(LOADABLES_DIR\) && \$\(MAKE\) \$\(MFLAGS\) DESTDIR=\$\(DESTDIR\) \$@ \)//' Makefile.in

	# Cygwin/MSYS2: workaround for configure using cp -p where ln -s should be used
	# (this is an automake/autoconf issue, they should trust Cygwin/MSYS2 and not use
	# ancient workarounds for issues which no longer exists)
	(set -o xtrace ; sed -i "s/as_ln_s='cp -pR'/as_ln_s='ln -s'/g" $(find . -name 'configure') )

	if $config_use_posix_ksh93_builtins ; then
		(set -o xtrace ; sed -i "s/\/bin\/sh/\/bin\/ksh93/g" $(find . -name 'configure') )
	fi

	if is_cygwin && (( (cygwin_vers.major*1000+cygwin_vers.minor) >= 3005 )) ; then
		# workaround for gcc 15.0 used in Cygwin 3.6
		export CFLAGS="-std=gnu17 -Wno-error=implicit-function-declaration -Wno-error=implicit-int"
	else
		export CFLAGS="-std=gnu99"
	fi

	if $config_use_posix_ksh93_builtins ; then
		CONFIG_SHELL=/usr/bin/ksh93 ksh93 ./configure "${configure_options[@]}"
	else
		CONFIG_SHELL=/usr/bin/bash bash ./configure "${configure_options[@]}"
	fi

	if $config_cp_p_function_not_implemented_workaround ; then
		# workaround for $ cp -p # failing with "Function not
		# implemented" in older versions of ms-nfs41-client
		if $config_use_posix_ksh93_builtins ; then
			(
				set -o xtrace
				sed -i -r 's/(cp.*)([[:space:]]+-p[[:space:]]+)/\1\2 -A pt /g' \
					$(find . -name 'Makefile' -o -name 'Makefile.in')
			)
		else
			(
				set -o xtrace ; sed -i -r 's/(cp.*)([[:space:]]+-p[[:space:]]+)/\1\2--no-preserve=ownership /g' \
				$(find . -name 'Makefile' -o -name 'Makefile.in')
			)
		fi
	fi

	if $config_use_posix_ksh93_builtins ; then
		# replace /bin/sh with /bin/ksh93 for speed
		(set -o xtrace ; sed -i -r 's/\/bin\/sh/\/bin\/ksh93/g' \
			$(find . -name 'Makefile' -o -name 'Makefile.in') )
	fi

	#
	# build bash
	#
	if $config_use_posix_ksh93_builtins ; then
		if is_cygwin && (( (cygwin_vers.major*1000+cygwin_vers.minor) >= 3005 )) ; then
			time ksh93 -c 'export SHELL=/bin/ksh93 ; bmake -j16 install DESTDIR="$PWD/install_root"'
		else
			time ksh93 -c 'export SHELL=/bin/ksh93 ; make -j16 install DESTDIR="$PWD/install_root"'
		fi
	else
		if is_cygwin && (( (cygwin_vers.major*1000+cygwin_vers.minor) >= 3005 )) ; then
			time bash -c 'export SHELL=/bin/bash ; bmake -j16 install DESTDIR="$PWD/install_root"'
		else
			time bash -c 'export SHELL=/bin/bash ; make -j16 install DESTDIR="$PWD/install_root"'
		fi
	fi
	echo $?

	echo "#Done."
	return 0
}


function bash_clean
{
	set -o xtrace
	set -o errexit
	set -o nounset

	rm -Rf bash
	return 0
}

function msnfs41client_createcache
{
	set -o xtrace
	set -o errexit
	set -o nounset

	mkdir -p '../gitbundles'
	rm -f '../gitbundles/ms-nfs41-client.bundle'

	git -c checkout.workers=16 clone 'https://github.com/kofemann/ms-nfs41-client.git'
	cd 'ms-nfs41-client'
	git config --global --add safe.directory "$PWD"
	git bundle create '../gitbundles/ms-nfs41-client.bundle' --all
	git config --global --unset safe.directory "$PWD"
	cd ..
	rm -Rf 'ms-nfs41-client'

	return 0
}


function msnfs41client_build
{
	set -o xtrace
	set -o errexit
	set -o nounset

	#
	# build config
	#
	typeset config_vs_disable_incremental_linker=true

	compound gitdata=(
		typeset url='https://github.com/kofemann/ms-nfs41-client.git'
		# use fixed git tag, so build times are compareable
		typeset tag='master'
	)

	#
	# temp dir setup
	#

	tmpdir="$PWD/tmpdir"
	mkdir -p "$tmpdir"
	chmod a+rwxt "$tmpdir"
	if [[ -d "$tmpdir" && -w "$tmpdir" ]] ; then
		printf '#### Using temp dir %q\n' "$tmpdir"
		export TMPDIR="$tmpdir"
		export TEMP="$tmpdir"
		export TMP="$tmpdir"
	else
		print -u2 -f "TEMPDIR %q on NFS filesystem does not work.\n" "$tmpdir"
		return 1
	fi

	#
	# print user info
	#
	id -a
	pwd

	#
	# source checkout
	#

	if [[ -f '../gitbundles/ms-nfs41-client.bundle' ]] ; then
		# Use local bundle as cache,
		# so build times only depend on local filesystem performance
		# and not HTTPS speed
		time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch '../gitbundles/ms-nfs41-client.bundle'
	else
		time git -c checkout.workers=16 clone -b "${gitdata.tag}" --single-branch "${gitdata.url}"
	fi

	cd "$PWD/ms-nfs41-client/"

	# make sure git commands (like git "describe", "fsck", ...) work
	git config --global --add safe.directory "$PWD"

	# use git fsck as filesystem test
	time git fsck

	#
	# patch sources and configure build
	#

	#
	# disable incremental linking, which causes VC19 link.exe to
	# crash, resulting in a
	# "LINK : fatal error LNK1000: Internal error during IMAGE::Pass1"
	#
	if $config_vs_disable_incremental_linker ; then
		sed -i -E 's/<LinkIncremental>true<\/LinkIncremental>/<LinkIncremental>false<\/LinkIncremental>/g' $(find 'build.vc19' -name \*.vcxproj)
	fi

	# Use WDK test certificate to sign *.(exe|dll) files
	export CERTIFICATE_THUMBPRINT="$(powershell -c 'Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.Subject -like "*WDKTestCert*"} | Select-Object -ExpandProperty Thumbprint')"
	if [[ "${CERTIFICATE_THUMBPRINT}" == '' ]] ; then
		printf '%s: ERROR: Empty CERTIFICATE_THUMBPRINT\n' "$0"
		return 1
	fi

	#
	# build ms-nfs41-client
	#
	(
		#
		# We assume here:
		# Visual Studio 2019 --> Win10 64bit+32bit build,
		# Visual Studio 2022 --> Win11/64bit-only build
		#
		if [[ -x '/cygdrive/c/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/MSBuild.exe' ]] ; then
			# Visual Studio 19 64bit+32bit kernel codepath
			export PATH="/cygdrive/c/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/:$PATH"
			set -o errexit

			# "retarget" VS platform toolset to "v143"
			# ("v142" should remain the default when comitting)
			sed -i -E 's/<PlatformToolset>v...<\/PlatformToolset>/<PlatformToolset>v143<\/PlatformToolset>/g' $(find 'build.vc19' -name \*.vcxproj)

			# build
			time make -j1 -f cygwin/Makefile build64
			time make -j1 -f cygwin/Makefile installdest64
			time make -j1 -f cygwin/Makefile bintarball64
		elif [[ -x '/cygdrive/c/Program Files/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/MSBuild.exe' || \
			-x '/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/MSBuild.exe' ]] ; then
			# Visual Studio 19 64bit+32bit kernel codepath
			if [[ -x '/cygdrive/c/Program Files/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/MSBuild.exe' ]] ; then
				export PATH="/cygdrive/c/Program Files/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/:$PATH"
			else
				export PATH="/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Current/Bin/:$PATH"
			fi
			set -o errexit

			# "retarget" VS platform toolset to "v142"
			# ("v142" should remain the default when comitting)
			sed -i -E 's/<PlatformToolset>v...<\/PlatformToolset>/<PlatformToolset>v142<\/PlatformToolset>/g' $(find 'build.vc19' -name \*.vcxproj)

			# build
			time make -j1 -f cygwin/Makefile build
			time make -j1 -f cygwin/Makefile installdest
			time make -j1 -f cygwin/Makefile bintarball
		else
			print -u2 -f "%s: Unknown compiler.\n" "$0"
			exit 5
		fi
	)
	echo $?

	echo "#Done."
	return 0
}


function msnfs41client_clean
{
	set -o xtrace
	set -o errexit
	set -o nounset

	rm -Rf 'ms-nfs41-client'
	return 0
}


#
# get_cpv_cygwin_version - get cygwin version as compound var
#
function get_cpv_cygwin_version
{
	nameref c_vers=$1
	typeset uname_r="${ /usr/bin/uname -r ; }"
	typeset leftover

	# Example output of $ uname -r # on Cygwin:
	# "3.3.6-341.i686"
	# "3.7.0-dev-289-g63dc988ac745-dirty.x86_64"
	leftover="${uname_r/~(Elr)([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)-(?:dev-|)([[:digit:]]+)(-|\.).+/x}"

	if [[ "$leftover" != 'x' ]] ; then
		print -u2 -f $"%s: error parsing uname -r for Cygwin version number, got %q\n" \
			"$0" "$leftover"
		return 1
	fi

	integer c_vers.major="${.sh.match[1]}"
	integer c_vers.minor="${.sh.match[2]}"
	integer c_vers.revision="${.sh.match[3]}"
	integer c_vers.relcount="${.sh.match[4]}"

	return 0
}

function is_cygwin
{
	if [[ "$(/usr/bin/uname -s)" == ~(El)CYGWIN_NT ]] ; then
		return 0
	fi

	return 1
}

function is_mingw64
{
	if [[ "$(/usr/bin/uname -s)" == ~(El)MINGW64_NT ]] ; then
		return 0
	fi

	return 1
}

#
# Enumerate installed toolkit packages and fill
# an associative array with the package names
#
function enumerate_toolkit_packages
{
	nameref package_arr=$1
	typeset i j

	if is_cygwin ; then
		# cygcheck in Cygwin 3.3 does not support -n
		/usr/bin/cygcheck -c -d | while read i j ; do
			package_arr["$i"]='true'
		done
		return 0
	elif is_mingw64 ; then
		# cygcheck in Cygwin 3.3 does not support -n
		/usr/bin/pacman -Qqn | while read i j ; do
			package_arr["$i"]='true'
		done
		return 0
	fi

	print -u2 -f $"%s: Unsupported toolkit.\n" "$0"

	return 1
}


#
# test if a Cygwin package is installed, based on
# the array of package names passed as $1
#
function is_toolkit_pkg_installed
{
	nameref package_arr=$1
	typeset package_name="$2"
	if [[ ! -v package_arr["$package_name"] ]] ; then
		print -u2 -f $"Toolkit package '%s' not installed.\n" "$package_name"
		return 1
	fi

	return 0
}


function main
{
	typeset -A itp # installed toolkit packages
	integer errc=0 # error counter
	typeset target="$1"
	typeset subcmd="$2"
	compound cygwin_vers

	get_cpv_cygwin_version cygwin_vers

	enumerate_toolkit_packages itp

	case "${target}_${subcmd}" in
		'gcc_createcache')
			is_toolkit_pkg_installed itp 'git' || (( errc++ ))
			gcc_createcache
			return $?
			;;
		'gcc_build')
			is_toolkit_pkg_installed itp 'git' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gcc-core' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gcc-g++' || (( errc++ ))
			is_toolkit_pkg_installed itp 'make' || (( errc++ ))
			is_toolkit_pkg_installed itp 'patch' || (( errc++ ))
			is_toolkit_pkg_installed itp 'flex' || (( errc++ ))
			is_toolkit_pkg_installed itp 'bison' || (( errc++ ))
			is_toolkit_pkg_installed itp 'libgmp-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'libmpfr-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'libmpc-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'libintl-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'libisl-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'autoconf' || (( errc++ ))
			is_toolkit_pkg_installed itp 'automake' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gettext' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gettext-devel' || (( errc++ ))
			(( errc > 0 )) && return 1
			gcc_build
			return $?
			;;
		'gcc_clean')
			gcc_clean
			return $?
			;;
		'bash_createcache')
			is_toolkit_pkg_installed itp 'git' || (( errc++ ))
			bash_createcache
			return $?
			;;
		'bash_build')
			is_toolkit_pkg_installed itp 'git' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gcc-core' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gcc-g++' || (( errc++ ))
			is_toolkit_pkg_installed itp 'autoconf' || (( errc++ ))
			is_toolkit_pkg_installed itp 'automake' || (( errc++ ))
			is_toolkit_pkg_installed itp 'flex' || (( errc++ ))
			is_toolkit_pkg_installed itp 'bison' || (( errc++ ))
			if is_cygwin ; then
				if (( (cygwin_vers.major*1000+cygwin_vers.minor) >= 3005 )) ; then
					print '# bash_build: Using Cygwin >= 3.5 config'
					# Only Cygwin >= 3.5 has /usr/bin/bmake
					is_toolkit_pkg_installed itp 'bmake' || (( errc++ ))
				else
					print '# bash_build: Using Cygwin < 3.5 config'
					is_toolkit_pkg_installed itp 'make' || (( errc++ ))
				fi
			elif is_mingw64 ; then
				is_toolkit_pkg_installed itp 'make' || (( errc++ ))
			else
				print '# bash_build: unsupported toolkit'
			fi
			is_toolkit_pkg_installed itp 'patch' || (( errc++ ))
			is_toolkit_pkg_installed itp 'libncurses-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gettext' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gettext-devel' || (( errc++ ))
			is_toolkit_pkg_installed itp 'texinfo' || (( errc++ ))
			(( errc > 0 )) && return 1
			bash_build
			return $?
			;;
		'bash_clean')
			bash_clean
			return $?
			;;
		'msnfs41client_createcache')
			is_toolkit_pkg_installed itp 'git' || (( errc++ ))
			msnfs41client_createcache
			return $?
			;;
		'msnfs41client_build')
			is_toolkit_pkg_installed itp 'git' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gcc-core' || (( errc++ ))
			is_toolkit_pkg_installed itp 'gcc-g++' || (( errc++ ))
			is_toolkit_pkg_installed itp 'mingw64-i686-clang' || (( errc++ ))
			is_toolkit_pkg_installed itp 'mingw64-x86_64-clang' || (( errc++ ))
			is_toolkit_pkg_installed itp 'make' || (( errc++ ))
			is_toolkit_pkg_installed itp 'tar' || (( errc++ ))
			is_toolkit_pkg_installed itp 'bzip2' || (( errc++ ))
			is_toolkit_pkg_installed itp 'openssl' || (( errc++ ))
			(( errc > 0 )) && return 1
			msnfs41client_build
			return $?
			;;
		'msnfs41client_clean')
			msnfs41client_clean
			return $?
			;;
		*)
			print -u2 -f $"%s: Unknown %q/%q combination." \
				"$0" "${target}" "${subcmd}"
			return 1
			;;
	esac

	# not reached
	return 1
}


#
# main
#
builtin id
builtin mkdir
# builtin uname - for now (until we have a native MSYS2 ksh93) we
# should not use the builtin uname here, because it will store the
# toolkit name (Cygwin, MSYS2, ...) at libast built time

main "$@"
return $?

# EOF.
